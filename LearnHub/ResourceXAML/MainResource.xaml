<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:waitvm="clr-namespace:LearnHub.ViewModels.WaitingViewModels"  
                    xmlns:authvm="clr-namespace:LearnHub.ViewModels.AuthenticationViewModels"  
                    xmlns:adminvm="clr-namespace:LearnHub.ViewModels.AdminViewModels"
                    xmlns:components="clr-namespace:LearnHub.Components" 
                    xmlns:waitingviews="clr-namespace:LearnHub.Views.WaitingViews"
                    xmlns:authviews="clr-namespace:LearnHub.Views.AuthenticationViews"
                    xmlns:adminviews="clr-namespace:LearnHub.Views.AdminViews">

    <!--#region DataTemplate -->
    <DataTemplate DataType="{x:Type waitvm:WaitingViewModel}">
        <waitingviews:WaitingView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type authvm:LoginViewModel}">
        <authviews:LoginView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type adminvm:AdminViewModel}">
        <adminviews:AdminView/>
    </DataTemplate>
    <!--#endregion-->

    <!--Font Style-->
    <Style x:Key="font_style" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="/Resource/Fonts/Roboto-Medium.ttf #Roboto"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="Black"/>
    </Style>

    <!--Button ControlBar Style-->
    <Style x:Key="btnControlBarStyle" TargetType="{x:Type Button}">

        <Style.Setters>

            <Setter Property="Width" Value="50"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="Black"/>

            <Setter Property="FontFamily" Value="/Resource/Fonts/Roboto-Medium.ttf #Roboto"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"
                                VerticalAlignment="Center" HorizontalAlignment="Center">
                            <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}"
                                   VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#a8a8a8"/>
            </Trigger>
        </Style.Triggers>

    </Style>

    <!--togglebutton style template-->
    <ImageBrush x:Key="tb_mouse_over"
                ImageSource="pack://application:,,,/LearnHub;component/resource/icons/menu_effect.png"/>
    
    <Style x:Key="tb_style" TargetType="{x:Type ToggleButton}">

        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource tb_mouse_over}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource tb_mouse_over}"/>
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource tb_mouse_over}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource tb_mouse_over}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
            
        </Setter>
        
    </Style>
    
    <!--menu button theme-->
    <Style BasedOn="{StaticResource {x:Type ToggleButton}}"
           TargetType="{x:Type RadioButton}"
           x:Key="MenuButtonTheme">
        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border x:Name="Border"
                                BorderThickness="0"
                                Background="#ebd1d1"
                                BorderBrush="Transparent">

                            <Grid>
                                <StackPanel Orientation="Horizontal">
                                    <Image Source="{Binding Tag, RelativeSource={RelativeSource AncestorType=RadioButton}}" Width="40" Height="40" Stretch="Fill"
                                       HorizontalAlignment="Left" Margin="7 0 5 0"/>
                                    <TextBlock x:Name="textBlock" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5 0 0 0"
                                               Text="{TemplateBinding Content}" Style="{StaticResource font_style}"/>
                                </StackPanel>
                            </Grid>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="#E8E1E1"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="#E8E1E1"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="#E8E1E1"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="#E8E1E1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Width" Value="140"/>
            <Setter Property="Height" Value="50"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>

        </Style.Setters>
    </Style>
    
    <!--button style-->
    <Style x:Key="btnStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="60"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontFamily" Value="/Resource/Fonts/Roboto-Medium.ttf #Roboto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1"
                            Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"
                            VerticalAlignment="Center" HorizontalAlignment="Center" CornerRadius="20">
                        <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}"
                               VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#84b7e3"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    
</ResourceDictionary>